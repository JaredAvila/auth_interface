{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nexport const register = (name, email, password, password2) => async dispatch => {\n  dispatch(authStart());\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    password2\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:8000/api/v1/user/register\", body, config);\n    dispatch({\n      type: actionTypes.REGISTER_SUCCESS,\n      payload: res.token\n    });\n  } catch (err) {\n    dispatch({\n      type: actionTypes.REGISTER_FAIL\n    });\n  }\n}; // export const checkAuthTimeout = expirationTime => {\n//   return dispatch => {\n//     setTimeout(() => {\n//       dispatch(logout());\n//     }, expirationTime * 1000);\n//   };\n// };\n// export const logout = () => {\n//   localStorage.removeItem(\"email\");\n//   localStorage.removeItem(\"token\");\n//   localStorage.removeItem(\"userId\");\n//   localStorage.removeItem(\"expirationTime\");\n//   return {\n//     type: actionTypes.AUTH_LOGOUT\n//   };\n// };\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n}; // export const authSuccess = (token, userId, email) => {\n//   return {\n//     type: actionTypes.AUTH_SUCCESS,\n//     token,\n//     userId,\n//     email\n//   };\n// };\n// export const authFail = error => {\n//   return {\n//     type: actionTypes.AUTH_FAIL,\n//     error\n//   };\n// };\n// export const auth = (email, password, isSignUp) => {\n//   return dispatch => {\n//     dispatch(authStart());\n//     const data = {\n//       email,\n//       password,\n//       returnSecureToken: true\n//     };\n//     let url = \"http://localhost:8000/api/v1/juvicount/register\";\n//     if (!isSignUp) {\n//       url = \"http://localhost:8000/api/v1/juvicount/login\";\n//     }\n//     axios\n//       .post(url, data)\n//       .then(res => {\n//         const expirationTime = new Date(\n//           new Date().getTime() + res.data.expiresIn * 1000\n//         );\n//         localStorage.setItem(\"token\", res.data.idToken);\n//         localStorage.setItem(\"userId\", res.data.id);\n//         localStorage.setItem(\"email\", res.data.email);\n//         localStorage.setItem(\"expirationTime\", expirationTime);\n//         dispatch(authSuccess(res.data.idToken, res.data.id, res.data.email));\n//         dispatch(checkAuthTimeout(res.data.expiresIn));\n//       })\n//       .catch(err => {\n//         dispatch(authFail(err.response.data.error));\n//       });\n//   };\n// };\n// export const authCheckState = () => {\n//   return dispatch => {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) {\n//       dispatch(logout());\n//     } else {\n//       const expirationTime = new Date(localStorage.getItem(\"expirationTime\"));\n//       if (expirationTime <= new Date()) {\n//         dispatch(logout());\n//       } else {\n//         const userId = localStorage.getItem(\"userId\");\n//         const email = localStorage.getItem(\"email\");\n//         dispatch(authSuccess(token, userId, email));\n//         dispatch(\n//           checkAuthTimeout(\n//             (expirationTime.getTime() - new Date().getTime()) / 1000\n//           )\n//         );\n//       }\n//     }\n//   };\n// };","map":{"version":3,"sources":["C:/Users/thesa/OneDrive/Documents/Dev/NodeJS/auth_interface/client/src/store/actions/auth.js"],"names":["actionTypes","axios","register","name","email","password","password2","dispatch","authStart","config","headers","body","JSON","stringify","res","post","type","REGISTER_SUCCESS","payload","token","err","REGISTER_FAIL","AUTH_START"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CACtBC,IADsB,EAEtBC,KAFsB,EAGtBC,QAHsB,EAItBC,SAJsB,KAKnB,MAAMC,QAAN,IAAkB;AACrBA,EAAAA,QAAQ,CAACC,SAAS,EAAV,CAAR;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEV,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA;AAAzB,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMQ,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAChB,4CADgB,EAEhBJ,IAFgB,EAGhBF,MAHgB,CAAlB;AAKAF,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEhB,WAAW,CAACiB,gBADX;AAEPC,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,KAAD,CAAR;AAID,GAVD,CAUE,OAAOC,GAAP,EAAY;AACZb,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEhB,WAAW,CAACqB;AADX,KAAD,CAAR;AAGD;AACF,CA9BM,C,CAgCP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMb,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLQ,IAAAA,IAAI,EAAEhB,WAAW,CAACsB;AADb,GAAP;AAGD,CAJM,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const register = (\r\n  name,\r\n  email,\r\n  password,\r\n  password2\r\n) => async dispatch => {\r\n  dispatch(authStart());\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ name, email, password, password2 });\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      \"http://localhost:8000/api/v1/user/register\",\r\n      body,\r\n      config\r\n    );\r\n    dispatch({\r\n      type: actionTypes.REGISTER_SUCCESS,\r\n      payload: res.token\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: actionTypes.REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// export const checkAuthTimeout = expirationTime => {\r\n//   return dispatch => {\r\n//     setTimeout(() => {\r\n//       dispatch(logout());\r\n//     }, expirationTime * 1000);\r\n//   };\r\n// };\r\n\r\n// export const logout = () => {\r\n//   localStorage.removeItem(\"email\");\r\n//   localStorage.removeItem(\"token\");\r\n//   localStorage.removeItem(\"userId\");\r\n//   localStorage.removeItem(\"expirationTime\");\r\n//   return {\r\n//     type: actionTypes.AUTH_LOGOUT\r\n//   };\r\n// };\r\n\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionTypes.AUTH_START\r\n  };\r\n};\r\n\r\n// export const authSuccess = (token, userId, email) => {\r\n//   return {\r\n//     type: actionTypes.AUTH_SUCCESS,\r\n//     token,\r\n//     userId,\r\n//     email\r\n//   };\r\n// };\r\n\r\n// export const authFail = error => {\r\n//   return {\r\n//     type: actionTypes.AUTH_FAIL,\r\n//     error\r\n//   };\r\n// };\r\n\r\n// export const auth = (email, password, isSignUp) => {\r\n//   return dispatch => {\r\n//     dispatch(authStart());\r\n//     const data = {\r\n//       email,\r\n//       password,\r\n//       returnSecureToken: true\r\n//     };\r\n//     let url = \"http://localhost:8000/api/v1/juvicount/register\";\r\n//     if (!isSignUp) {\r\n//       url = \"http://localhost:8000/api/v1/juvicount/login\";\r\n//     }\r\n//     axios\r\n//       .post(url, data)\r\n//       .then(res => {\r\n//         const expirationTime = new Date(\r\n//           new Date().getTime() + res.data.expiresIn * 1000\r\n//         );\r\n//         localStorage.setItem(\"token\", res.data.idToken);\r\n//         localStorage.setItem(\"userId\", res.data.id);\r\n//         localStorage.setItem(\"email\", res.data.email);\r\n//         localStorage.setItem(\"expirationTime\", expirationTime);\r\n//         dispatch(authSuccess(res.data.idToken, res.data.id, res.data.email));\r\n//         dispatch(checkAuthTimeout(res.data.expiresIn));\r\n//       })\r\n//       .catch(err => {\r\n//         dispatch(authFail(err.response.data.error));\r\n//       });\r\n//   };\r\n// };\r\n\r\n// export const authCheckState = () => {\r\n//   return dispatch => {\r\n//     const token = localStorage.getItem(\"token\");\r\n//     if (!token) {\r\n//       dispatch(logout());\r\n//     } else {\r\n//       const expirationTime = new Date(localStorage.getItem(\"expirationTime\"));\r\n//       if (expirationTime <= new Date()) {\r\n//         dispatch(logout());\r\n//       } else {\r\n//         const userId = localStorage.getItem(\"userId\");\r\n//         const email = localStorage.getItem(\"email\");\r\n//         dispatch(authSuccess(token, userId, email));\r\n//         dispatch(\r\n//           checkAuthTimeout(\r\n//             (expirationTime.getTime() - new Date().getTime()) / 1000\r\n//           )\r\n//         );\r\n//       }\r\n//     }\r\n//   };\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}