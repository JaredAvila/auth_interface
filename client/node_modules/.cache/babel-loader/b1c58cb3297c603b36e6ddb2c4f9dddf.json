{"ast":null,"code":"export const checkValidation = (value, rules) => {\n  let isValid = true;\n\n  if (rules.required) {\n    isValid = value.trim() !== \"\" && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.trim().length >= rules.minLength && isValid;\n  }\n\n  if (rules.maxLength) {\n    isValid = value.trim().length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isNumeric) {\n    const pattern = /^\\d+$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  return isValid;\n};","map":{"version":3,"sources":["C:/Users/thesa/OneDrive/Documents/Dev/NodeJS/auth_interface/client/src/helpers/validation.js"],"names":["checkValidation","value","rules","isValid","required","trim","minLength","length","maxLength","isEmail","pattern","test","isNumeric"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC/C,MAAIC,OAAO,GAAG,IAAd;;AAEA,MAAID,KAAK,CAACE,QAAV,EAAoB;AAClBD,IAAAA,OAAO,GAAGF,KAAK,CAACI,IAAN,OAAiB,EAAjB,IAAuBF,OAAjC;AACD;;AAED,MAAID,KAAK,CAACI,SAAV,EAAqB;AACnBH,IAAAA,OAAO,GAAGF,KAAK,CAACI,IAAN,GAAaE,MAAb,IAAuBL,KAAK,CAACI,SAA7B,IAA0CH,OAApD;AACD;;AAED,MAAID,KAAK,CAACM,SAAV,EAAqB;AACnBL,IAAAA,OAAO,GAAGF,KAAK,CAACI,IAAN,GAAaE,MAAb,IAAuBL,KAAK,CAACM,SAA7B,IAA0CL,OAApD;AACD;;AAED,MAAID,KAAK,CAACO,OAAV,EAAmB;AACjB,UAAMC,OAAO,GAAG,wJAAhB;AACAP,IAAAA,OAAO,GAAGO,OAAO,CAACC,IAAR,CAAaV,KAAb,KAAuBE,OAAjC;AACD;;AAED,MAAID,KAAK,CAACU,SAAV,EAAqB;AACnB,UAAMF,OAAO,GAAG,OAAhB;AACAP,IAAAA,OAAO,GAAGO,OAAO,CAACC,IAAR,CAAaV,KAAb,KAAuBE,OAAjC;AACD;;AAED,SAAOA,OAAP;AACD,CA1BM","sourcesContent":["export const checkValidation = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== \"\" && isValid;\r\n  }\r\n\r\n  if (rules.minLength) {\r\n    isValid = value.trim().length >= rules.minLength && isValid;\r\n  }\r\n\r\n  if (rules.maxLength) {\r\n    isValid = value.trim().length <= rules.maxLength && isValid;\r\n  }\r\n\r\n  if (rules.isEmail) {\r\n    const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  if (rules.isNumeric) {\r\n    const pattern = /^\\d+$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}