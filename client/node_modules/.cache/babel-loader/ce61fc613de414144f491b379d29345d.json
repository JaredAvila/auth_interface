{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nexport const register = ({\n  name,\n  email,\n  password,\n  password2\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    password2\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:8000/api/v1/user/register\", body, config);\n    dispatch({\n      type: actionTypes.REGISTER_SUCCESS,\n      payload: res.token\n    });\n  } catch (err) {\n    dispatch({\n      type: actionTypes.REGISTER_FAIL\n    });\n  }\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"email\");\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"userId\");\n  localStorage.removeItem(\"expirationTime\");\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId, email) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token,\n    userId,\n    email\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error\n  };\n};\nexport const auth = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart());\n    const data = {\n      email,\n      password,\n      returnSecureToken: true\n    };\n    let url = \"http://localhost:8000/api/v1/juvicount/register\";\n\n    if (!isSignUp) {\n      url = \"http://localhost:8000/api/v1/juvicount/login\";\n    }\n\n    axios.post(url, data).then(res => {\n      const expirationTime = new Date(new Date().getTime() + res.data.expiresIn * 1000);\n      localStorage.setItem(\"token\", res.data.idToken);\n      localStorage.setItem(\"userId\", res.data.id);\n      localStorage.setItem(\"email\", res.data.email);\n      localStorage.setItem(\"expirationTime\", expirationTime);\n      dispatch(authSuccess(res.data.idToken, res.data.id, res.data.email));\n      dispatch(checkAuthTimeout(res.data.expiresIn));\n    }).catch(err => {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationTime = new Date(localStorage.getItem(\"expirationTime\"));\n\n      if (expirationTime <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem(\"userId\");\n        const email = localStorage.getItem(\"email\");\n        dispatch(authSuccess(token, userId, email));\n        dispatch(checkAuthTimeout((expirationTime.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/thesa/OneDrive/Documents/Dev/NodeJS/auth_interface/client/src/store/actions/auth.js"],"names":["actionTypes","axios","register","name","email","password","password2","dispatch","config","headers","body","JSON","stringify","res","post","type","REGISTER_SUCCESS","payload","token","err","REGISTER_FAIL","checkAuthTimeout","expirationTime","setTimeout","logout","localStorage","removeItem","AUTH_LOGOUT","authStart","AUTH_START","authSuccess","userId","AUTH_SUCCESS","authFail","error","AUTH_FAIL","auth","isSignUp","data","returnSecureToken","url","then","Date","getTime","expiresIn","setItem","idToken","id","catch","response","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const register = ({\r\n  name,\r\n  email,\r\n  password,\r\n  password2\r\n}) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ name, email, password, password2 });\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      \"http://localhost:8000/api/v1/user/register\",\r\n      body,\r\n      config\r\n    );\r\n    dispatch({\r\n      type: actionTypes.REGISTER_SUCCESS,\r\n      payload: res.token\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: actionTypes.REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\nexport const checkAuthTimeout = expirationTime => {\r\n  return dispatch => {\r\n    setTimeout(() => {\r\n      dispatch(logout());\r\n    }, expirationTime * 1000);\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"email\");\r\n  localStorage.removeItem(\"token\");\r\n  localStorage.removeItem(\"userId\");\r\n  localStorage.removeItem(\"expirationTime\");\r\n  return {\r\n    type: actionTypes.AUTH_LOGOUT\r\n  };\r\n};\r\n\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionTypes.AUTH_START\r\n  };\r\n};\r\n\r\nexport const authSuccess = (token, userId, email) => {\r\n  return {\r\n    type: actionTypes.AUTH_SUCCESS,\r\n    token,\r\n    userId,\r\n    email\r\n  };\r\n};\r\n\r\nexport const authFail = error => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error\r\n  };\r\n};\r\n\r\nexport const auth = (email, password, isSignUp) => {\r\n  return dispatch => {\r\n    dispatch(authStart());\r\n    const data = {\r\n      email,\r\n      password,\r\n      returnSecureToken: true\r\n    };\r\n    let url = \"http://localhost:8000/api/v1/juvicount/register\";\r\n    if (!isSignUp) {\r\n      url = \"http://localhost:8000/api/v1/juvicount/login\";\r\n    }\r\n    axios\r\n      .post(url, data)\r\n      .then(res => {\r\n        const expirationTime = new Date(\r\n          new Date().getTime() + res.data.expiresIn * 1000\r\n        );\r\n        localStorage.setItem(\"token\", res.data.idToken);\r\n        localStorage.setItem(\"userId\", res.data.id);\r\n        localStorage.setItem(\"email\", res.data.email);\r\n        localStorage.setItem(\"expirationTime\", expirationTime);\r\n        dispatch(authSuccess(res.data.idToken, res.data.id, res.data.email));\r\n        dispatch(checkAuthTimeout(res.data.expiresIn));\r\n      })\r\n      .catch(err => {\r\n        dispatch(authFail(err.response.data.error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n  return dispatch => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      dispatch(logout());\r\n    } else {\r\n      const expirationTime = new Date(localStorage.getItem(\"expirationTime\"));\r\n      if (expirationTime <= new Date()) {\r\n        dispatch(logout());\r\n      } else {\r\n        const userId = localStorage.getItem(\"userId\");\r\n        const email = localStorage.getItem(\"email\");\r\n        dispatch(authSuccess(token, userId, email));\r\n        dispatch(\r\n          checkAuthTimeout(\r\n            (expirationTime.getTime() - new Date().getTime()) / 1000\r\n          )\r\n        );\r\n      }\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}